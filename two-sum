//O(n^2)
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] arr = new int[2];


        for(int i = 0; i < nums.length; i++){
            int j = target - nums[i];
            for(int k = 0; k < nums.length; k++){
                if (nums[k] == j) {
                    arr[0] = k;
                    arr[1] = i;
                    break;
                }
            }

        }
        return arr;

    }
}

//O(n)
class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> map = new HashMap<>();
        
        for(int i = 0; i < nums.length; i++){
            map.put(nums[i], i);
        }

        for(int i = 0; i < nums.length; i++){
            int n = target - nums[i];
            if (map.containsKey(n) && map.get(n) != i) {
                int[] arr = {i, map.get(n)};
                return arr;
            }
        }    

    return new int[0];

    }
}
